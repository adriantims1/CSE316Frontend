{"ast":null,"code":"import axios from \"axios\";\nconst defaultHeaders = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=UTF-8\"\n  }\n};\nexport const adminLoginAPIMethod = (data, success) => {\n  return axios.post(\"http://localhost:5000/api/admin/login\", data, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const deleteUserAPIMethod = (data, success) => {\n  return axios.delete(`http://localhost:5000/api/admin/usersInfo/${data.id}`, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const getAllUsersAPIMethod = success => {\n  return axios.get(\"http://localhost:5000/api/admin/usersInfo\", {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const getAllMessagesAPIMethod = success => {\n  return axios.get(\"http://localhost:5000/api/admin/ContactUs\", {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const NotifyAPIMethod = (userInfo, success) => {\n  return fetch(`http://localhost:5000/api/admin/notify`, { ...defaultHeaders,\n    method: \"POST\",\n    body: JSON.stringify(userInfo)\n  }).then(checkStatus).then(success);\n};\n_c = NotifyAPIMethod;\n\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const res = await parseJSON(response);\n    const error = new Error(`HTTP Error: ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = res.message ? res.message : res;\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NotifyAPIMethod\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/api/adminClient.js"],"names":["axios","defaultHeaders","headers","adminLoginAPIMethod","data","success","post","withCredentials","then","checkStatus","deleteUserAPIMethod","delete","id","getAllUsersAPIMethod","get","getAllMessagesAPIMethod","NotifyAPIMethod","userInfo","fetch","method","body","JSON","stringify","response","status","res","parseJSON","error","Error","statusText","message","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AADY,CAAvB;AAKA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACpD,SAAOL,KAAK,CACTM,IADI,CACC,uCADD,EAC0CF,IAD1C,EACgD;AACnDG,IAAAA,eAAe,EAAE;AADkC,GADhD,EAIJC,IAJI,CAICC,WAJD,EAKJD,IALI,CAKCH,OALD,CAAP;AAMD,CAPM;AASP,OAAO,MAAMK,mBAAmB,GAAG,CAACN,IAAD,EAAOC,OAAP,KAAmB;AACpD,SAAOL,KAAK,CACTW,MADI,CACI,6CAA4CP,IAAI,CAACQ,EAAG,EADxD,EAC2D;AAC9DL,IAAAA,eAAe,EAAE;AAD6C,GAD3D,EAIJC,IAJI,CAICC,WAJD,EAKJD,IALI,CAKCH,OALD,CAAP;AAMD,CAPM;AASP,OAAO,MAAMQ,oBAAoB,GAAIR,OAAD,IAAa;AAC/C,SAAOL,KAAK,CACTc,GADI,CACA,2CADA,EAC6C;AAChDP,IAAAA,eAAe,EAAE;AAD+B,GAD7C,EAIJC,IAJI,CAICC,WAJD,EAKJD,IALI,CAKCH,OALD,CAAP;AAMD,CAPM;AAWP,OAAO,MAAMU,uBAAuB,GAAIV,OAAD,IAAa;AAClD,SAAOL,KAAK,CACTc,GADI,CACA,2CADA,EAC6C;AAChDP,IAAAA,eAAe,EAAE;AAD+B,GAD7C,EAIJC,IAJI,CAICC,WAJD,EAKJD,IALI,CAKCH,OALD,CAAP;AAMD,CAPM;AAUP,OAAO,MAAMW,eAAe,GAAG,CAACC,QAAD,EAAWZ,OAAX,KAAuB;AACpD,SAAOa,KAAK,CAAE,wCAAF,EAA2C,EACrD,GAAGjB,cADkD;AAErDkB,IAAAA,MAAM,EAAE,MAF6C;AAGrDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,QAAf;AAH+C,GAA3C,CAAL,CAKJT,IALI,CAKCC,WALD,EAMJD,IANI,CAMCH,OAND,CAAP;AAOD,CARM;KAAMW,e;;AAUb,eAAeP,WAAf,CAA2Bc,QAA3B,EAAqC;AACnC,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnD,WAAOD,QAAP;AACD,GAFD,MAEO;AACL,UAAME,GAAG,GAAG,MAAMC,SAAS,CAACH,QAAD,CAA3B;AAEA,UAAMI,KAAK,GAAG,IAAIC,KAAJ,CAAW,eAAcL,QAAQ,CAACM,UAAW,EAA7C,CAAd;AACAF,IAAAA,KAAK,CAACH,MAAN,GAAeD,QAAQ,CAACM,UAAxB;AACAF,IAAAA,KAAK,CAACJ,QAAN,GAAiBE,GAAG,CAACK,OAAJ,GAAcL,GAAG,CAACK,OAAlB,GAA4BL,GAA7C;AAEA,UAAME,KAAN;AACD;AACF;;AACD,SAASD,SAAT,CAAmBH,QAAnB,EAA6B;AAC3B,SAAOA,QAAQ,CAACQ,IAAT,EAAP;AACD","sourcesContent":["import axios from \"axios\";\nconst defaultHeaders = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n  },\n};\nexport const adminLoginAPIMethod = (data, success) => {\n  return axios\n    .post(\"http://localhost:5000/api/admin/login\", data, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\nexport const deleteUserAPIMethod = (data, success) => {\n  return axios\n    .delete(`http://localhost:5000/api/admin/usersInfo/${data.id}`, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\nexport const getAllUsersAPIMethod = (success) => {\n  return axios\n    .get(\"http://localhost:5000/api/admin/usersInfo\", {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\n\n\nexport const getAllMessagesAPIMethod = (success) => {\n  return axios\n    .get(\"http://localhost:5000/api/admin/ContactUs\", {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\n\nexport const NotifyAPIMethod = (userInfo, success) => {\n  return fetch(`http://localhost:5000/api/admin/notify`, {\n    ...defaultHeaders,\n    method: \"POST\",\n    body: JSON.stringify(userInfo),\n  })\n    .then(checkStatus)\n    .then(success);\n};\n\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const res = await parseJSON(response);\n\n    const error = new Error(`HTTP Error: ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = res.message ? res.message : res;\n\n    throw error;\n  }\n}\nfunction parseJSON(response) {\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}