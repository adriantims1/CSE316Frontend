{"ast":null,"code":"var _jsxFileName = \"/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/UserTransGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../SideBar\";\nimport Chart from \"react-apexcharts\";\nimport { Grid, Paper, makeStyles, Container } from \"@material-ui/core\";\nimport UserHeader from \"../userHeader\";\nimport { getBinomoDealsAPIMethod } from \"../../api/profileClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\"\n  },\n  rightbar: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"80%\",\n    backgroundColor: theme.palette.primary.main,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  rightContainer: {\n    height: \"95%\",\n    width: \"95%\",\n    backgroundColor: theme.palette.primary.dark\n  },\n  contentContainer: {\n    height: \"85%\",\n    width: \"100%\"\n  }\n}));\nexport default function MessageCenter() {\n  _s();\n\n  const [chartOption, setChartOption] = useState({\n    chart: {\n      type: \"line\",\n      zoom: {\n        enabled: false\n      }\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"],\n        // takes an array which will be repeated on columns\n        opacity: 0.5\n      }\n    },\n    yaxis: {\n      title: {\n        text: \"Profit\"\n      }\n    },\n    colors: [\"#0b4870\"]\n  });\n  const [series, setSeries] = useState([{\n    name: \"Data-1\",\n    data: []\n  }]);\n  useEffect(async () => {\n    if (!localStorage.getItem(\"graphData\")) {\n      var data = await getBinomoDealsAPIMethod(90);\n      data = data.data;\n      localStorage.setItem(\"graphData\", JSON.stringify(data));\n    }\n\n    var temp = localStorage.getItem(\"graphData\");\n    var arrCandle = [0];\n    temp = JSON.parse(temp).data;\n    temp.forEach(el => {\n      arrCandle.push((arrCandle[arrCandle.length - 1] - el.amount / 100 + el.win / 100).toFixed(2));\n    });\n    console.log(arrCandle);\n    setSeries([{\n      name: \"Data-1\",\n      data: arrCandle\n    }]);\n  }, []);\n  const classes = styles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.rightbar,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.rightContainer,\n        children: [/*#__PURE__*/_jsxDEV(UserHeader, {\n          page: \"Transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: classes.contentContainer,\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            options: chartOption,\n            series: series,\n            type: \"line\",\n            width: \"100%\",\n            height: \"90%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MessageCenter, \"rClrFeMQxmhvZNKub1N+TbuZQzU=\");\n\n_c = MessageCenter;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageCenter\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/UserTransGraph.js"],"names":["React","useState","useEffect","Sidebar","Chart","Grid","Paper","makeStyles","Container","UserHeader","getBinomoDealsAPIMethod","styles","theme","root","height","width","rightbar","display","backgroundColor","palette","primary","main","alignItems","justifyContent","rightContainer","dark","contentContainer","MessageCenter","chartOption","setChartOption","chart","type","zoom","enabled","stroke","curve","grid","row","colors","opacity","yaxis","title","text","series","setSeries","name","data","localStorage","getItem","setItem","JSON","stringify","temp","arrCandle","parse","forEach","el","push","length","amount","win","toFixed","console","log","classes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../SideBar\";\nimport Chart from \"react-apexcharts\";\n\nimport { Grid, Paper, makeStyles, Container } from \"@material-ui/core\";\n\nimport UserHeader from \"../userHeader\";\nimport { getBinomoDealsAPIMethod } from \"../../api/profileClient\";\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\",\n  },\n  rightbar: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"80%\",\n    backgroundColor: theme.palette.primary.main,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  rightContainer: {\n    height: \"95%\",\n    width: \"95%\",\n    backgroundColor: theme.palette.primary.dark,\n  },\n  contentContainer: {\n    height: \"85%\",\n    width: \"100%\",\n  },\n}));\n\nexport default function MessageCenter() {\n  const [chartOption, setChartOption] = useState({\n    chart: {\n      type: \"line\",\n      zoom: {\n        enabled: false,\n      },\n    },\n    stroke: {\n      curve: \"smooth\",\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n        opacity: 0.5,\n      },\n    },\n    yaxis: {\n      title: {\n        text: \"Profit\",\n      },\n    },\n    colors: [\"#0b4870\"],\n  });\n  const [series, setSeries] = useState([\n    {\n      name: \"Data-1\",\n      data: [],\n    },\n  ]);\n  useEffect(async () => {\n    if (!localStorage.getItem(\"graphData\")) {\n      var data = await getBinomoDealsAPIMethod(90);\n      data = data.data;\n      localStorage.setItem(\"graphData\", JSON.stringify(data));\n    }\n    var temp = localStorage.getItem(\"graphData\");\n    var arrCandle = [0];\n    temp = JSON.parse(temp).data;\n    temp.forEach((el) => {\n      arrCandle.push(\n        (\n          arrCandle[arrCandle.length - 1] -\n          el.amount / 100 +\n          el.win / 100\n        ).toFixed(2)\n      );\n    });\n    console.log(arrCandle);\n    setSeries([\n      {\n        name: \"Data-1\",\n        data: arrCandle,\n      },\n    ]);\n  }, []);\n  const classes = styles();\n  return (\n    <Grid container alignItems=\"center\" className={classes.root}>\n      <Sidebar />\n      <Grid item className={classes.rightbar}>\n        <Paper className={classes.rightContainer}>\n          <UserHeader page=\"Transactions\" />\n          <Container className={classes.contentContainer}>\n            <Chart\n              options={chartOption}\n              series={series}\n              type=\"line\"\n              width=\"100%\"\n              height=\"90%\"\n            ></Chart>\n          </Container>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}"]},"metadata":{},"sourceType":"module"}