{"ast":null,"code":"import axios from \"axios\";\nconst defaultHeaders = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=UTF-8\"\n  }\n};\nexport const GetProfileDataAPIMethod = success => {\n  return fetch(`/api/profile/checkOnline`, { ...defaultHeaders,\n    method: \"GET\"\n  }).then(checkStatus).then(parseJSON).then(success);\n};\n_c = GetProfileDataAPIMethod;\nexport const uploadImageToCloudinaryAPIMethod = (formData, success) => {\n  //const cloudName = \"nilson01\"; // Cloudinary account\n  const cloudName = \"dtkgfy2wk\";\n  return fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {\n    // We do NOT want to set the default headers â€“ the formData will automatically set the\n    // headers to tell the server of the data type (which is different than the JSON\n    // standard all the other API calls have been sending.\n    method: \"POST\",\n    body: formData\n  }).then(checkStatus).then(parseJSON).then(success);\n};\nexport const getprofileurlAPIMethod = success => {\n  return axios.get(\"http://localhost:5000/api/profile/profileHeader\", {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const getBinomoDealsAPIMethod = (amount, success) => {\n  return axios.get(`http://localhost:5000/api/profile/fetchBinomoDeals/${amount}`, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const changeProfileAPIMethod = (data, success) => {\n  return axios.post(\"http://localhost:5000/api/profile/settings\", data, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const changePasswordAPIMethod = (data, success) => {\n  return axios.post(\"http://localhost:5000/api/profile/changePassword\", data, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\nexport const checkPasswordAPIMethod = (data, success) => {\n  return axios.post(\"http://localhost:5000/api/profile/checkPassword\", data, {\n    withCredentials: true\n  }).then(checkStatus).then(success);\n};\n\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const res = await parseJSON(response);\n    const error = new Error(`HTTP Error: ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = res.message ? res.message : res;\n    throw error;\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"GetProfileDataAPIMethod\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/api/profileClient.js"],"names":["axios","defaultHeaders","headers","GetProfileDataAPIMethod","success","fetch","method","then","checkStatus","parseJSON","uploadImageToCloudinaryAPIMethod","formData","cloudName","body","getprofileurlAPIMethod","get","withCredentials","getBinomoDealsAPIMethod","amount","changeProfileAPIMethod","data","post","changePasswordAPIMethod","checkPasswordAPIMethod","response","status","res","error","Error","statusText","message","json"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst defaultHeaders = {\n  headers: {\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n  },\n};\nexport const GetProfileDataAPIMethod = (success) => {\n  return fetch(`/api/profile/checkOnline`, {\n    ...defaultHeaders,\n    method: \"GET\",\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(success);\n};\n\nexport const uploadImageToCloudinaryAPIMethod = (formData, success) => {\n  //const cloudName = \"nilson01\"; // Cloudinary account\n  const cloudName = \"dtkgfy2wk\";\n  return fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {\n    // We do NOT want to set the default headers â€“ the formData will automatically set the\n    // headers to tell the server of the data type (which is different than the JSON\n    // standard all the other API calls have been sending.\n    method: \"POST\",\n    body: formData,\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(success);\n};\n\nexport const getprofileurlAPIMethod = (success) => {\n  return axios\n    .get(\"http://localhost:5000/api/profile/profileHeader\", {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\nexport const getBinomoDealsAPIMethod = (amount, success) => {\n  return axios\n    .get(`http://localhost:5000/api/profile/fetchBinomoDeals/${amount}`, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\n\nexport const changeProfileAPIMethod = (data, success) => {\n  return axios\n    .post(\"http://localhost:5000/api/profile/settings\", data, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\n\nexport const changePasswordAPIMethod = (data, success) => {\n  return axios\n    .post(\"http://localhost:5000/api/profile/changePassword\", data, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n    .then(success);\n};\nexport const checkPasswordAPIMethod = (data, success) => {\n  return axios\n    .post(\"http://localhost:5000/api/profile/checkPassword\", data, {\n      withCredentials: true,\n    })\n    .then(checkStatus)\n\n    .then(success);\n};\n\nasync function checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    const res = await parseJSON(response);\n    const error = new Error(`HTTP Error: ${response.statusText}`);\n    error.status = response.statusText;\n    error.response = res.message ? res.message : res;\n\n    throw error;\n  }\n}\nfunction parseJSON(response) {\n  return response.json();\n}\n"]},"metadata":{},"sourceType":"module"}