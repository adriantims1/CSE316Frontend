{"ast":null,"code":"var _jsxFileName = \"/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/page/Statistics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Sidebar from \"../components/SideBar\";\nimport UserHeader from \"../components/userHeader\";\nimport Chart from \"react-apexcharts\";\nimport Masonry from 'react-masonry-css';\nimport { Grid, Paper, makeStyles } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\"\n  },\n  rightbar: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"80%\",\n    backgroundColor: theme.palette.primary.main,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  rightContainer: {\n    height: \"95%\",\n    width: \"95%\",\n    backgroundColor: theme.palette.primary.dark\n  },\n  contentContainer: {\n    height: \"85%\",\n    width: \"100%\"\n  }\n}));\nexport default function ContactUserVAdmin() {\n  _s();\n\n  const [isAdmin, setIsAdmin] = useState(JSON.parse(localStorage.getItem(\"isAdmin\")));\n  const classes = styles(); //BAR graph\n\n  var users = JSON.parse(localStorage.getItem(\"users\"));\n  let month = {};\n  users.forEach(element => month[new Date(element.joinedDate).getMonth()] ? month[new Date(element.joinedDate).getMonth()] += 1 : month[new Date(element.joinedDate).getMonth()] = 1);\n  let monthCategories = [\"Jan\", \"Feb\", \"Mar\"];\n  let monthData = [8, 7, 9];\n  let MonthLst = ['0', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  Object.keys(month).forEach(element => {\n    monthCategories.push(MonthLst[element]);\n    monthData.push(month[element]);\n  });\n  const [optionsB, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: monthCategories\n    }\n  });\n  const [seriesB, setSeries] = useState([{\n    name: \"User Joining size\",\n    data: monthData\n  }]); //DONUT graph\n\n  const [optionsD, setOptionsD] = useState({\n    labels: ['Win', 'Loss', 'Tie']\n  });\n  let x = localStorage.getItem(\"seriesD\");\n  const [seriesD, setSeriesD] = useState([Number(x[0]), Number(x[2]), Number(x[4])]);\n  const breakpoints = {\n    default: 5,\n    1100: 4,\n    700: 3,\n    500: 2\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.rightbar,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.rightContainer,\n        children: [/*#__PURE__*/_jsxDEV(UserHeader, {\n          page: \" Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n          breakpointCols: breakpoints,\n          className: \"my-masonry-grid\",\n          columnClassName: \"my-masonry-grid_column\",\n          children: [isAdmin ? \"Admin-: \" : \"Profile-\", isAdmin && /*#__PURE__*/_jsxDEV(Chart, {\n            options: optionsB,\n            series: seriesB,\n            type: \"bar\",\n            width: \"500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Chart, {\n            options: optionsD,\n            series: seriesD,\n            type: \"pie\",\n            width: \"380\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactUserVAdmin, \"f3HVSfJ4CbXjq2DusS3ssxjpne8=\");\n\n_c = ContactUserVAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactUserVAdmin\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/page/Statistics.js"],"names":["React","useEffect","useState","Sidebar","UserHeader","Chart","Masonry","Grid","Paper","makeStyles","styles","theme","root","height","width","rightbar","display","backgroundColor","palette","primary","main","alignItems","justifyContent","rightContainer","dark","contentContainer","ContactUserVAdmin","isAdmin","setIsAdmin","JSON","parse","localStorage","getItem","classes","users","month","forEach","element","Date","joinedDate","getMonth","monthCategories","monthData","MonthLst","Object","keys","push","optionsB","setOptions","chart","id","xaxis","categories","seriesB","setSeries","name","data","optionsD","setOptionsD","labels","x","seriesD","setSeriesD","Number","breakpoints","default"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Sidebar from \"../components/SideBar\";\nimport UserHeader from \"../components/userHeader\";\nimport Chart from \"react-apexcharts\";\nimport Masonry from 'react-masonry-css';\n\nimport {\n  Grid,\n  Paper,\n  makeStyles,\n} from \"@material-ui/core\";\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\",\n  },\n  rightbar: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"80%\",\n    backgroundColor: theme.palette.primary.main,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  rightContainer: {\n    height: \"95%\",\n    width: \"95%\",\n    backgroundColor: theme.palette.primary.dark,\n  },\n  contentContainer: {\n    height: \"85%\",\n    width: \"100%\",\n  },\n}));\n\nexport default function ContactUserVAdmin() {\n\n  const [isAdmin, setIsAdmin] = useState(JSON.parse(localStorage.getItem(\"isAdmin\")));\n  const classes = styles();\n\n  //BAR graph\n\n  var users = JSON.parse(localStorage.getItem(\"users\"));\n  let month = {};\n  (users).forEach(element => (month[new Date(element.joinedDate).getMonth()]) ? month[new Date(element.joinedDate).getMonth()] += 1 : month[new Date(element.joinedDate).getMonth()] = 1);\n  let monthCategories = [\"Jan\", \"Feb\", \"Mar\",];\n  let monthData = [8, 7, 9];\n  let MonthLst = ['0', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  Object.keys(month).forEach(element => {\n    monthCategories.push(MonthLst[element])\n    monthData.push(month[element])\n  });\n  const [optionsB, setOptions] = useState({ chart: { id: \"basic-bar\" }, xaxis: { categories: monthCategories } });\n  const [seriesB, setSeries] = useState([{ name: \"User Joining size\", data: monthData }]);\n\n\n  //DONUT graph\n  const [optionsD, setOptionsD] = useState({ labels: ['Win', 'Loss', 'Tie'] });\n  let x = localStorage.getItem(\"seriesD\")\n  const [seriesD, setSeriesD] = useState([Number(x[0]), Number(x[2]), Number(x[4])]);\n\n\n\n  const breakpoints = {\n    default: 5,\n    1100: 4,\n    700: 3,\n    500: 2\n  };\n\n  return (\n    <Grid container alignItems=\"center\" className={classes.root}>\n      <Sidebar />\n      <Grid item className={classes.rightbar}>\n        <Paper className={classes.rightContainer}>\n          <UserHeader page=\" Statistics\" />\n\n          <Masonry\n            breakpointCols={breakpoints}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\">\n            {isAdmin ? \"Admin-: \" : \"Profile-\"}\n\n            {isAdmin && <Chart\n              options={optionsB}\n              series={seriesB}\n              type=\"bar\"\n              width=\"500\"\n            />}\n\n            <Chart options={optionsD} series={seriesD} type=\"pie\" width=\"380\" />\n\n          </Masonry>\n\n\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}