{"ast":null,"code":"var _jsxFileName = \"/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/UserTransGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../SideBar\";\nimport Chart from \"react-apexcharts\";\nimport { Grid, Paper, makeStyles, Container } from \"@material-ui/core\";\nimport UserHeader from \"../userHeader\";\nimport { getBinomoDealsAPIMethod } from \"../../api/profileClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\",\n    width: \"100vw\"\n  },\n  rightbar: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"80%\",\n    backgroundColor: theme.palette.primary.main,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  rightContainer: {\n    height: \"95%\",\n    width: \"95%\",\n    backgroundColor: theme.palette.primary.dark\n  },\n  contentContainer: {\n    height: \"85%\",\n    width: \"100%\"\n  }\n}));\nexport default function MessageCenter() {\n  _s();\n\n  const [chartOption, setChartOption] = useState({\n    chart: {\n      type: \"line\",\n      zoom: {\n        enabled: false\n      }\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"],\n        // takes an array which will be repeated on columns\n        opacity: 0.5\n      }\n    },\n    yaxis: {\n      title: {\n        text: \"Profit\"\n      }\n    },\n    colors: [\"#0b4870\"]\n  });\n  const [series, setSeries] = useState([{\n    name: \"Data-1\",\n    data: []\n  }]);\n  useEffect(async () => {\n    if (!localStorage.getItem(\"graphData\")) {\n      var data = await getBinomoDealsAPIMethod(90);\n      data = data.data;\n      localStorage.setItem(\"graphData\", JSON.stringify(data));\n    }\n\n    var temp = localStorage.getItem(\"graphData\");\n    var arrCandle = [0];\n    temp = JSON.parse(temp).data;\n    temp.forEach(el => {\n      arrCandle.push((arrCandle[arrCandle.length - 1] - el.amount / 100 + el.win / 100).toFixed(2));\n    });\n    console.log(arrCandle);\n    setSeries([{\n      name: \"Data-1\",\n      data: arrCandle\n    }]);\n  }, []);\n  const classes = styles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.rightbar,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.rightContainer,\n        children: [/*#__PURE__*/_jsxDEV(UserHeader, {\n          page: \"Transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: classes.contentContainer,\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            options: chartOption,\n            series: series,\n            type: \"line\",\n            width: \"100%\",\n            height: \"90%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MessageCenter, \"ZCGdZ4Kus2eFDd1EnVaPcYGgRO4=\");\n\n_c = MessageCenter;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageCenter\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/UserTransGraph.js"],"names":["React","useState","useEffect","Sidebar","Chart","Grid","Paper","makeStyles","Container","UserHeader","getBinomoDealsAPIMethod","styles","theme","root","height","width","rightbar","display","backgroundColor","palette","primary","main","alignItems","justifyContent","rightContainer","dark","contentContainer","MessageCenter","chartOption","setChartOption","chart","type","zoom","enabled","stroke","curve","grid","row","colors","opacity","yaxis","title","text","series","setSeries","name","data","localStorage","getItem","setItem","JSON","stringify","temp","arrCandle","parse","forEach","el","push","length","amount","win","toFixed","console","log","classes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Sidebar from \"../SideBar\";\nimport Chart from \"react-apexcharts\";\n\nimport { Grid, Paper, makeStyles, Container } from \"@material-ui/core\";\n\nimport UserHeader from \"../userHeader\";\nimport { getBinomoDealsAPIMethod } from \"../../api/profileClient\";\n\nconst styles = makeStyles((theme) => ({\n    root: {\n        height: \"100vh\",\n        width: \"100vw\",\n    },\n    rightbar: {\n        display: \"flex\",\n        height: \"100%\",\n        width: \"80%\",\n        backgroundColor: theme.palette.primary.main,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    rightContainer: {\n        height: \"95%\",\n        width: \"95%\",\n        backgroundColor: theme.palette.primary.dark,\n    },\n    contentContainer: {\n        height: \"85%\",\n        width: \"100%\",\n    },\n}));\n\nexport default function MessageCenter() {\n    const [chartOption, setChartOption] = useState({\n        chart: {\n            type: \"line\",\n            zoom: {\n                enabled: false,\n            },\n        },\n        stroke: {\n            curve: \"smooth\",\n        },\n        grid: {\n            row: {\n                colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n                opacity: 0.5,\n            },\n        },\n        yaxis: {\n            title: {\n                text: \"Profit\",\n            },\n        },\n        colors: [\"#0b4870\"],\n    });\n    const [series, setSeries] = useState([\n        {\n            name: \"Data-1\",\n            data: [],\n        },\n    ]);\n    useEffect(async () => {\n        if (!localStorage.getItem(\"graphData\")) {\n            var data = await getBinomoDealsAPIMethod(90);\n            data = data.data;\n            localStorage.setItem(\"graphData\", JSON.stringify(data));\n        }\n        var temp = localStorage.getItem(\"graphData\");\n        var arrCandle = [0];\n        temp = JSON.parse(temp).data;\n        temp.forEach((el) => {\n            arrCandle.push(\n                (\n                    arrCandle[arrCandle.length - 1] -\n                    el.amount / 100 +\n                    el.win / 100\n                ).toFixed(2)\n            );\n        });\n        console.log(arrCandle);\n        setSeries([\n            {\n                name: \"Data-1\",\n                data: arrCandle,\n            },\n        ]);\n    }, []);\n    const classes = styles();\n    return (\n        <Grid container alignItems=\"center\" className={classes.root}>\n            <Sidebar />\n            <Grid item className={classes.rightbar}>\n                <Paper className={classes.rightContainer}>\n                    <UserHeader page=\"Transactions\" />\n                    <Container className={classes.contentContainer}>\n                        <Chart\n                            options={chartOption}\n                            series={series}\n                            type=\"line\"\n                            width=\"100%\"\n                            height=\"90%\"\n                        ></Chart>\n                    </Container>\n                </Paper>\n            </Grid>\n        </Grid>\n    );\n}"]},"metadata":{},"sourceType":"module"}