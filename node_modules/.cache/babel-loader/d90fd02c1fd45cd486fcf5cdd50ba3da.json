{"ast":null,"code":"var _jsxFileName = \"/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/StatisticsAdmin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function StatisticsAdmin() {\n  _s();\n\n  //BAR graph\n  var users = JSON.parse(localStorage.getItem(\"users\"));\n  let month = {};\n  users.forEach(element => month[new Date(element.joinedDate).getMonth()] ? month[new Date(element.joinedDate).getMonth()] += 1 : month[new Date(element.joinedDate).getMonth()] = 1);\n  let monthCategories = [\"Jan\", \"Feb\", \"Mar\"];\n  let monthData = [4, 2, 6];\n  let MonthLst = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  Object.keys(month).forEach(element => {\n    monthCategories.push(MonthLst[element]);\n    monthData.push(month[element]);\n  });\n  const [optionsB, setOptions] = useState({\n    chart: {\n      id: \"basic-bar\"\n    },\n    xaxis: {\n      categories: monthCategories\n    }\n  });\n  const [seriesB, setSeries] = useState([{\n    name: \"User Joining size\",\n    data: monthData\n  }]); //DONUT graph\n\n  const [optionsD, setOptionsD] = useState({\n    labels: ['Win', 'Loss', 'Tie']\n  });\n  let x = localStorage.getItem(\"seriesD\");\n  const [seriesD, setSeriesD] = useState([Number(x[0]), Number(x[2]), Number(x[4])]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: optionsB,\n        series: seriesB,\n        type: \"bar\",\n        width: \"500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        options: optionsD,\n        series: seriesD,\n        type: \"pie\",\n        width: \"380\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StatisticsAdmin, \"8J1NploeW+e2jfJbLBp8faQeS9s=\");\n\n_c = StatisticsAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"StatisticsAdmin\");","map":{"version":3,"sources":["/Users/nilsonchapagain/Desktop/316SeparatedProject/CSE316Frontend/website/src/components/Statistics SubComp/StatisticsAdmin.js"],"names":["React","useState","Chart","StatisticsAdmin","users","JSON","parse","localStorage","getItem","month","forEach","element","Date","joinedDate","getMonth","monthCategories","monthData","MonthLst","Object","keys","push","optionsB","setOptions","chart","id","xaxis","categories","seriesB","setSeries","name","data","optionsD","setOptionsD","labels","x","seriesD","setSeriesD","Number"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nexport default function StatisticsAdmin() {\n\n  //BAR graph\n  var users = JSON.parse(localStorage.getItem(\"users\"));\n  let month = {};\n  (users).forEach(element => (month[new Date(element.joinedDate).getMonth()]) ? month[new Date(element.joinedDate).getMonth()] += 1 : month[new Date(element.joinedDate).getMonth()] = 1);\n  let monthCategories = [\"Jan\", \"Feb\", \"Mar\",];\n  let monthData = [4, 2, 6];\n  let MonthLst = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  Object.keys(month).forEach(element => {\n    monthCategories.push(MonthLst[element])\n    monthData.push(month[element])\n  });\n  const [optionsB, setOptions] = useState({ chart: { id: \"basic-bar\" }, xaxis: { categories: monthCategories } });\n  const [seriesB, setSeries] = useState([{ name: \"User Joining size\", data: monthData }]);\n\n\n  //DONUT graph\n  const [optionsD, setOptionsD] = useState({ labels: ['Win', 'Loss', 'Tie'] });\n  let x = localStorage.getItem(\"seriesD\")\n  const [seriesD, setSeriesD] = useState([Number(x[0]), Number(x[2]), Number(x[4])]);\n\n  return (\n    <>\n      <div>\n        <Chart\n          options={optionsB}\n          series={seriesB}\n          type=\"bar\"\n          width=\"500\"\n        />\n      </div>\n\n      <div>\n        <Chart options={optionsD} series={seriesD} type=\"pie\" width=\"380\" />\n      </div>\n\n    </>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}